{"version":3,"sources":["Store.ts","AddTrack.tsx","Track.tsx","TrackSettings.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["convertToTrackPoint","data","latitude","longitude","heartrate","elevation","timestamp","dayjs","valueOf","toRad","deg","Math","PI","getPos","position","computeSpeed","pos1","pos2","dist","lat1","lon1","lat2","lon2","φ1","φ2","Δφ","Δλ","a","sin","cos","atan2","sqrt","computeDist","timeDiff","undefined","parseGPX","id","name","parser","xml2js","Parser","Promise","res","rej","parseString","err","xml","parseTrack","gpx","trk","map","positions","startTime","min","endTime","max","relativePositions","i","relativeTime","speed","console","log","timeOffset","store","getCurrentPoint","track","tracks","find","Error","before","filter","point","currentTime","reverse","after","computeProp","prop","b","aw","bw","avg","abs","persist","tracksById","JSON","stringify","window","localStorage","setItem","getTrackColor","index","niceColors","length","str","hash","charCodeAt","colour","toString","substr","stringToColour","getColor","pair","Infinity","parse","getItem","this","Object","values","observable","computed","action","uuid","observe","setInterval","autoIncrement","SPEED","maxTime","observer","useState","isOpen","setIsOpen","useDropzone","acceptedFiles","getRootProps","getInputProps","Set","deletedFiles","setDeletedFiles","deleteFile","file","set","newSet","add","useEffect","forEach","Modal","trigger","Button","primary","content","onClick","open","onClose","Header","Content","has","Segment","key","style","display","justifyContent","negative","icon","Actions","text","split","addTrack","color","currentPosition","Polyline","trackpoint","CircleMarker","center","radius","Popup","List","Item","Icon","round","className","isEditing","setIsEditing","safe","fnc","borderTop","top","left","fontSize","fontWeight","horizontal","Input","label","labelPosition","type","val","onChange","e","target","value","divided","width","textAlign","cp","basic","size","circular","v","removeTrack","seconds","minutes","hours","alignItems","right","zIndex","maxHeight","overflow","bottom","flexGrow","settings","step","Map","zoom","TileLayer","attribution","url","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f993e767.chunk.js","sourcesContent":["import { observe, observable, action, computed } from \"mobx\";\nimport { v4 as uuid } from \"uuid\";\nimport parseTrack from \"parse-gpx/src/parseTrack\";\nimport xml2js from \"xml2js\";\nimport dayjs from \"dayjs\";\n\nconst storeVersion = 2;\n\nconst stringToColour = (str: string) => {\n  let hash = 0;\n  for (let i = 0; i < str.length; i++) {\n    hash = str.charCodeAt(i) + ((hash << 5) - hash);\n  }\n  let colour = \"#\";\n  for (let i = 0; i < 3; i++) {\n    let value = (hash >> (i * 8)) & 0xff;\n    colour += (\"00\" + value.toString(16)).substr(-2);\n  }\n  return colour;\n};\n\nconst getColor = (id: string, index: number) => {\n  const niceColors = [\n    \"#CC0000\",\n    \"#FF8000\",\n    \"#FFFF00\",\n    \"#00FF00\",\n    \"#0080FF\",\n    \"#7F00FF\",\n    \"#FF00FF\",\n    \"#663300\",\n  ];\n\n  if (index < niceColors.length) {\n    return niceColors[index];\n  } else {\n    return stringToColour(id);\n  }\n};\n\nconst avg = (a: number, b: number, aw: number, bw: number) =>\n  aw === 0 ? b : (a * aw + b * bw) / (aw + bw);\n\nconst convertToTrackPoint = (data: any) =>\n  ({\n    latitude: +data.latitude,\n    longitude: +data.longitude,\n    heartrate: +data.heartrate,\n    elevation: +data.elevation,\n    timestamp: dayjs(data.timestamp).valueOf(),\n  } as Partial<TrackPoint>);\n\nconst toRad = (deg: number) => (deg * Math.PI) / 180;\n\nconst getPos = (position: TrackPoint) =>\n  [position.latitude, position.latitude] as [number, number];\n\nconst computeDist = (\n  [lat1, lon1]: [number, number],\n  [lat2, lon2]: [number, number]\n) => {\n  const R = 6371e3; // metres\n  const φ1 = toRad(lat1);\n  const φ2 = toRad(lat2);\n  const Δφ = toRad(lat2 - lat1);\n  const Δλ = toRad(lon2 - lon1);\n\n  const a =\n    Math.sin(Δφ / 2) * Math.sin(Δφ / 2) +\n    Math.cos(φ1) * Math.cos(φ2) * Math.sin(Δλ / 2) * Math.sin(Δλ / 2);\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n\n  return R * c;\n};\n\nconst computeSpeed = (pos1: TrackPoint, pos2: TrackPoint) => {\n  const dist = computeDist(getPos(pos1), getPos(pos2));\n  const timeDiff = (pos2.timestamp - pos1.timestamp) / 1000;\n  return timeDiff > 0 ? dist / timeDiff : undefined;\n};\n\nconst parseGPX = async (data: string, id: string, name: string) => {\n  const parser = new xml2js.Parser();\n  const [positions, trk] = await new Promise<[TrackPoint[], any]>((res, rej) =>\n    parser.parseString(data, (err: any, xml: any) => {\n      if (err) {\n        rej(err);\n      } else {\n        res([parseTrack(xml.gpx.trk).map(convertToTrackPoint), xml.gpx.trk]);\n      }\n    })\n  );\n  const startTime = Math.min(\n    ...positions.map((position) => position.timestamp)\n  );\n  const endTime = Math.max(...positions.map((position) => position.timestamp));\n  const relativePositions = positions.map(\n    (position, i) =>\n      ({\n        ...position,\n        relativeTime: position.timestamp - startTime,\n        speed: computeSpeed(\n          positions[i - 1] || position,\n          positions[i + 1] || position\n        ),\n      } as TrackPoint)\n  );\n\n  console.log(relativePositions);\n\n  return {\n    name: trk.name || name,\n    id,\n    positions: relativePositions,\n    startTime,\n    endTime,\n    timeOffset: 0,\n  };\n};\n\nclass Store {\n  @observable tracksById: { [key: string]: Track } = {};\n  @observable currentTime = 0;\n  @observable autoIncrement = false;\n\n  @computed get tracks() {\n    return Object.values(this.tracksById);\n  }\n\n  constructor() {\n    if (\n      JSON.parse(window.localStorage.getItem(\"storeVersion\") || \"-1\") ===\n      storeVersion\n    ) {\n      const tracksById = window.localStorage.getItem(\"tracksById\");\n      if (tracksById) this.tracksById = JSON.parse(tracksById);\n\n      const currentTime = window.localStorage.getItem(\"currentTime\");\n      if (currentTime) this.currentTime = JSON.parse(currentTime);\n    }\n  }\n\n  @computed get maxTime() {\n    return Math.max(\n      ...this.tracks.map((track) => track.endTime - track.startTime)\n    );\n  }\n\n  @action addTrack = async (track: string, name: string) => {\n    const id = uuid();\n    this.tracksById[id] = await parseGPX(track, id, name);\n  };\n\n  @action removeTrack = (id: string) => {\n    delete this.tracksById[id];\n  };\n\n  getCurrentPoint = (id: string) => {\n    const track = this.tracks.find(({ id: _id }) => _id === id);\n    if (!track) throw new Error(\"id not found\");\n\n    const before = track.positions\n      .filter(\n        (point) => point.relativeTime + track.timeOffset <= this.currentTime\n      )\n      .reverse()[0];\n    const after = track.positions.filter(\n      (point) => point.relativeTime + track.timeOffset >= this.currentTime\n    )[0];\n\n    if (!before || !after) return null;\n\n    const computeMiddle = (a: number, b: number) =>\n      avg(\n        a,\n        b,\n        Math.abs(after.relativeTime + track.timeOffset - this.currentTime),\n        Math.abs(before.relativeTime + track.timeOffset - this.currentTime)\n      );\n\n    const computeProp = (prop: keyof typeof before & keyof typeof after) =>\n      computeMiddle(before[prop], after[prop]);\n\n    const outVal: TrackPoint = {\n      elevation: computeProp(\"elevation\"),\n      latitude: computeProp(\"latitude\"),\n      longitude: computeProp(\"longitude\"),\n      heartrate: computeProp(\"heartrate\"),\n      relativeTime: computeProp(\"relativeTime\"),\n      timestamp: computeProp(\"timestamp\"),\n      speed: computeProp(\"speed\"),\n    };\n\n    return outVal;\n  };\n\n  persist = () => {\n    const tracksById = JSON.stringify(store.tracksById);\n    const currentTime = JSON.stringify(store.currentTime);\n\n    window.localStorage.setItem(\"tracksById\", tracksById);\n    window.localStorage.setItem(\"currentTime\", currentTime);\n    window.localStorage.setItem(\"storeVersion\", JSON.stringify(storeVersion));\n  };\n\n  getTrackColor = (id: string) => {\n    return getColor(\n      id,\n      (this.tracks\n        .map((track, i) => [track.id, i] as [string, number])\n        .find((pair) => pair[0] === id) || [\"\", Infinity])[1]\n    );\n  };\n}\n\nconst store = new Store();\n\n(window as any).persist = store.persist;\n\nobserve(store.tracksById, () => {\n  store.persist();\n});\n\nconst SPEED = 60;\nconst FPS = 24;\nsetInterval(() => {\n  if (store.autoIncrement) {\n    store.currentTime = Math.min(\n      store.currentTime + (SPEED * 1000) / FPS,\n      store.maxTime\n    );\n  }\n}, 1000 / FPS);\n\nexport default store;\n","import React, { useState, useEffect } from \"react\";\nimport { observer } from \"mobx-react\";\nimport { useDropzone } from \"react-dropzone\";\nimport { Modal, Button, Segment } from \"semantic-ui-react\";\nimport store from \"./Store\";\n\nconst AddTrack = () => {\n  const [isOpen, setIsOpen] = useState(false);\n  const { acceptedFiles, getRootProps, getInputProps } = useDropzone();\n  const [deletedFiles, setDeletedFiles] = useState(new Set());\n\n  const deleteFile = (file: File) =>\n    setDeletedFiles((set) => {\n      const newSet = new Set(set);\n      newSet.add(file);\n      return newSet;\n    });\n\n  const handleSubmit = () => {\n    acceptedFiles\n      .filter((file) => !deletedFiles.has(file))\n      .forEach(\n        async (file) =>\n          await store.addTrack(\n            await (file as any).text(),\n            file.name.split(\".\")[0]\n          )\n      );\n    setIsOpen(false);\n  };\n\n  useEffect(() => {\n    acceptedFiles.forEach(deleteFile);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isOpen]);\n\n  return (\n    <Modal\n      trigger={\n        <Button primary content=\"Add Tracks\" onClick={() => setIsOpen(true)} />\n      }\n      open={isOpen}\n      onClose={() => setIsOpen(false)}\n    >\n      <Modal.Header>Add Track</Modal.Header>\n      <Modal.Content>\n        {acceptedFiles\n          .filter((file) => !deletedFiles.has(file))\n          .map((file) => (\n            <Segment\n              key={file.name}\n              style={{ display: \"flex\", justifyContent: \"space-between\" }}\n            >\n              {file.name}\n              <Button negative icon=\"trash\" onClick={() => deleteFile(file)} />\n            </Segment>\n          ))}\n        <div {...getRootProps()}>\n          <Segment>\n            <input {...getInputProps()} />\n            <p>+ Drag 'n' drop some files here, or click to select files +</p>\n          </Segment>\n        </div>\n      </Modal.Content>\n      <Modal.Actions>\n        <Button primary content=\"Add selected tracks\" onClick={handleSubmit} />\n      </Modal.Actions>\n    </Modal>\n  );\n};\n\nexport default observer(AddTrack);\n","import { observer } from \"mobx-react\";\nimport React from \"react\";\nimport { List, Icon } from \"semantic-ui-react\";\nimport { CircleMarker, Polyline, Popup } from \"react-leaflet\";\nimport { FaMountain } from \"react-icons/fa\";\nimport { IoMdSpeedometer } from \"react-icons/io\";\nimport store from \"./Store\";\n\ntype Props = {\n  track: Track;\n  index: number;\n};\n\nconst Track = ({ track, index }: Props) => {\n  const color = store.getTrackColor(track.id);\n  const currentPosition = store.getCurrentPoint(track.id);\n\n  return (\n    <>\n      <Polyline\n        color={color}\n        positions={track.positions.map(\n          (trackpoint) =>\n            [trackpoint.latitude, trackpoint.longitude] as [number, number]\n        )}\n      />\n      {currentPosition && (\n        <CircleMarker\n          center={[currentPosition.latitude, currentPosition.longitude]}\n          color={color}\n          radius={10}\n        >\n          <Popup>\n            <List>\n              <List.Item>\n                <Icon name=\"heart\" />\n                <List.Content>\n                  {Math.round(currentPosition.heartrate)}\n                </List.Content>\n              </List.Item>\n              <List.Item>\n                <i className=\"icon\">\n                  <FaMountain />\n                </i>\n                <List.Content>\n                  {Math.round(currentPosition.elevation)} m\n                </List.Content>\n              </List.Item>\n              <List.Item>\n                <i className=\"icon\">\n                  <IoMdSpeedometer />\n                </i>\n                <List.Content>\n                  {Math.round(currentPosition.speed * 36) / 10} km/h\n                </List.Content>\n              </List.Item>\n            </List>\n          </Popup>\n        </CircleMarker>\n      )}\n    </>\n  );\n};\n\nexport default observer(Track);\n","import React, { useState } from \"react\";\nimport { observer } from \"mobx-react\";\nimport { List, Button, Icon, Segment, Input } from \"semantic-ui-react\";\nimport { FaMountain } from \"react-icons/fa\";\nimport { IoMdSpeedometer } from \"react-icons/io\";\nimport store from \"./Store\";\n\ntype Props = {\n  track: Track;\n};\n\nconst TrackSettings = ({ track }: Props) => {\n  const color = store.getTrackColor(track.id);\n  const currentPosition = store.getCurrentPoint(track.id);\n  const [isEditing, setIsEditing] = useState(false);\n  const safe = (fnc: (pc: TrackPoint) => React.ReactNode) =>\n    currentPosition ? fnc(currentPosition) : \"--\";\n\n  return (\n    <Segment\n      style={{\n        borderTop: `2px solid ${color}`,\n      }}\n    >\n      <label\n        style={{\n          position: \"absolute\",\n          top: 0,\n          left: 10,\n          fontSize: \".8em\",\n          fontWeight: \"bold\",\n        }}\n      >\n        {track.name}\n      </label>\n      <List horizontal>\n        {isEditing ? (\n          <List.Item>\n            <Input\n              label=\"Offset in seconds\"\n              labelPosition=\"left corner\"\n              type=\"number\"\n              val={`${store.tracksById[track.id].timeOffset / 1000}`}\n              onChange={(e) => {\n                store.tracksById[track.id].timeOffset = +e.target.value * 1000;\n              }}\n            ></Input>\n          </List.Item>\n        ) : (\n          <List.Item>\n            <List horizontal divided>\n              <List.Item style={{ width: 60, textAlign: \"left\" }}>\n                <List.Content>\n                  <Icon name=\"heart\" />\n                  {safe((cp) => Math.round(cp.heartrate))}\n                </List.Content>\n              </List.Item>\n              <List.Item style={{ width: 80, textAlign: \"left\" }}>\n                <List.Content>\n                  <i className=\"icon\">\n                    <FaMountain />\n                  </i>\n                  {safe((cp) => Math.round(cp.elevation))} m\n                </List.Content>\n              </List.Item>\n              <List.Item style={{ width: 100, textAlign: \"left\" }}>\n                <List.Content>\n                  <i className=\"icon\">\n                    <IoMdSpeedometer />\n                  </i>\n                  {safe((cp) => Math.round(cp.speed * 36) / 10)} km/h\n                </List.Content>\n              </List.Item>\n            </List>\n          </List.Item>\n        )}\n        <List.Item>\n          <Button\n            basic={!isEditing}\n            size=\"mini\"\n            circular\n            icon=\"setting\"\n            onClick={() => setIsEditing((v) => !v)}\n          />\n        </List.Item>\n        <List.Item>\n          <Button\n            icon=\"trash\"\n            negative\n            basic\n            size=\"mini\"\n            circular\n            onClick={() => store.removeTrack(track.id)}\n          />\n        </List.Item>\n      </List>\n    </Segment>\n  );\n};\n\nexport default observer(TrackSettings);\n","import { observer } from \"mobx-react\";\nimport React from \"react\";\nimport { Map, TileLayer } from \"react-leaflet\";\nimport { Slider } from \"react-semantic-ui-range\";\nimport { Segment, Button } from \"semantic-ui-react\";\nimport AddTrack from \"./AddTrack\";\nimport \"./App.css\";\nimport store from \"./Store\";\nimport Track from \"./Track\";\nimport TrackSettings from \"./TrackSettings\";\n\nfunction App() {\n  let seconds = ~~(store.currentTime / 1000);\n  let minutes = ~~(seconds / 60);\n  seconds %= 60;\n  let hours = ~~(minutes / 60);\n  minutes %= 60;\n\n  return (\n    <div\n      className=\"App\"\n      style={{\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n      }}\n    >\n      <div\n        style={{\n          position: \"absolute\",\n          top: 0,\n          right: 0,\n          zIndex: 1000,\n          maxHeight: \"calc(100vw - 100px)\",\n          overflow: \"auto\",\n        }}\n      >\n        <Segment>\n          {store.tracks.map((track) => (\n            <TrackSettings key={track.id} track={track} />\n          ))}\n          <AddTrack />\n        </Segment>\n      </div>\n      {store.tracks.length && (\n        <div\n          style={{\n            position: \"absolute\",\n            bottom: 0,\n            right: 0,\n            left: 0,\n            zIndex: 1000,\n          }}\n        >\n          <Segment style={{ display: \"flex\", alignItems: \"center\" }}>\n            <Button\n              onClick={() => {\n                store.autoIncrement = !store.autoIncrement;\n              }}\n              basic\n            >\n              {store.autoIncrement ? \"Stop\" : \"Play\"}\n            </Button>\n            <span style={{ width: \"100px\" }}>\n              {hours}:{minutes}:{seconds}\n            </span>\n            <div style={{ flexGrow: 1 }}>\n              <Slider\n                value={store.currentTime}\n                settings={{\n                  min: 0,\n                  max: store.maxTime,\n                  step: 1,\n                  onChange: (value: number) => {\n                    if (Math.abs(value - store.currentTime) > 1000 * 60)\n                      store.autoIncrement = false;\n                    store.currentTime = value;\n                  },\n                }}\n              />\n            </div>\n          </Segment>\n        </div>\n      )}\n      <Map center={[49.75618698634207, 13.303053053095937]} zoom={15}>\n        <TileLayer\n          attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        />\n        {store.tracks.map((track, i) => (\n          <Track track={track} index={i} />\n        ))}\n      </Map>\n    </div>\n  );\n}\n\nexport default observer(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}